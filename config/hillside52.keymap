/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "outer-keys.h"
#include "combos.h"
#include "keymap-german-rev3.h"
#include "keymap-linux.h"
#include "keymap-phpstorm.h"

#define DK_HRM_L 0
#define DVORAK_L 1
#define NUM_L    2
#define NAV_L    3
#define PHP_L    4
#define MED_L    5
#define SYM_L    6

&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <300>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        sm: slow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOW_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            quick_tap_ms = <300>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        combos {
                compatible = "zmk,combos";

                // key numbers
                //       0   1   2   3   4   5                      6   7   8   9  10  11
                //      12 [13][14][15][16] 17                     18 [19][20][21][22] 23
                //      24  25 [26] 27  28  29  30             31  32  33  34 [35] 36  37
                //      38  39  40     (41) 42  43  44     45  46  47 (48)     49  50  51

                //<editor-fold desc="hrm/AltGr umlauts">
                // Umlauts with AltGr on right half
                COMBO(13, 35, DE_AE)
                COMBO(14, 35, DE_OE)
                COMBO(16, 35, DE_UE)

                // ÃŸ with AltGr
                COMBO(22, 26, DE_SS)
                COMBO(22, 35, DE_SS)
                //</editor-fold>

                // Other
                COMBO( 16, 19, CAPS) // both hrm shifts
                COMBC( 16, 43, &caps_word) // left hrm shift + space
                COMBC( 17, 18, &tog DVORAK_L)
        };

        keymap {
                compatible = "zmk,keymap";

                dvorak_hrm_layer {
                        bindings = <
LOP_1         &kp  DE_SQT   &kp  DE_COMMA &kp  DE_DOT   &kp  P        &kp  DE_Y                                                                     &kp  F        &kp  G        &kp  C        &kp  R        &kp  L        &kp DE_FSLH
LOP_2         &hm  LGUI A   &hm  LALT O   &hm  LCTRL E  &hm  LSHIFT U &kp  I                                                                        &kp  D        &hm  LSHIFT H &hm  LCTRL T  &hm  LALT N   &hm  LGUI S   &kp DE_MINUS
LOP_3         &kp  DE_SEMI  &hm  RALT Q   &kp  J        &kp  K        &kp  X        LT_2_1                                            RT_2_1        &kp  B        &kp  M        &kp  W        &hm  RALT V   &kp DE_Z      ROP_3
LAR_1         LAR_2         LAR_3                       LT_4          LT_3          LT_2          LT_1                  RT_1          RT_2          RT_3          RT_4                        RAR_1         RAR_2         RAR_3
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp P_ P_>;
                };

                dvorak_layer {
                        bindings = <
LOP_1         &kp  DE_SQT   &kp  DE_COMMA &kp  DE_DOT   &kp  P        &kp  DE_Y                                                                     &kp  F        &kp  G        &kp  C        &kp  R        &kp  L        &kp DE_FSLH
LOP_2         &kp  A        &kp  O        &kp  E        &kp  U        &kp  I                                                                        &kp  D        &kp  H        &kp  T        &kp  N        &kp  S        &kp DE_MINUS
LOP_3         &kp  DE_SEMI  &kp  Q        &kp  J        &kp  K        &kp  X        LT_2_1                                            RT_2_1        &kp  B        &kp  M        &kp  W        &kp  V        &kp DE_Z      ROP_3
LAR_1         LAR_2         LAR_3                       LT_4          LT_3          LT_2          LT_1                  RT_1          RT_2          RT_3          RT_4                        RAR_1         RAR_2         RAR_3
                        >;
                };

                numbers_layer {
                    // _<>():      N789_x     <>: Shift(Tab), Tab
                    // _GACS.      =456_x     _: frei, x: frei
                    // _*/-+,      %123Ux     U: Up
                    // ___ ____  __0_ <D>     D: Down
                        bindings = <
&trans     &kp LS(TAB)      &kp TAB       &kp DE_LPAR   &kp DE_RPAR   &kp DE_COLON                                                                  &kp KP_NUM    &kp KP_N7     &kp KP_N8     &kp KP_N9     &none         &none
&trans     &kp LGUI         &kp LALT      &kp LCTRL     &kp LSHIFT    &kp DE_DOT                                                                    &kp DE_EQUAL  &kp KP_N4     &kp KP_N5     &kp KP_N6     &none         &none
&trans     &kp KP_MULTIPLY  &kp KP_DIVIDE &kp KP_MINUS  &kp KP_PLUS   &kp DE_COMMA  &none                                             &none         &kp PERCENT   &kp KP_N1     &kp KP_N2     &kp KP_N3     RAR_0         &none
&trans     &trans           &trans                      &trans        &trans        &kp K_CALC    &trans                &trans        &trans        &kp KP_N0     &trans                      RAR_1         RAR_2         RAR_3
                        >;
                };

                nav_layer {
                        bindings = <
LOP_1    &kp LC(F)       U_SWI_POP      &kp LC(R)       &kp F5               U_ADRBAR                                                               &kp PG_UP     &kp HOME      &kp UP        &kp END       &none         &none
LOP_2    &sm LGUI LC(X)  &sm LALT LC(C) &sm LCTRL LC(V) &sm LSHIFT LC(DE_Z)  P_COMENT                                                               &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp ESC       P_COLAPS
LOP_3    &kp LC(A)       &kp LS(LC(C))  &kp LS(LC(V))   &kp LS(LC(DE_Z))     &none      &none                                         &none         &kp INSERT    &kp LS(TAB)   &kp DE_FSLH   &kp TAB       RAR_0         P_EXPAND
&none    &none           &none                          LT_4                 LT_3       &trans    &kp LG(L)             &kp RTK_1     &kp RTK_2     &kp K_APP     RT_4                        RAR_1         RAR_2         RAR_3
                        >;
                };

                phpstorm_layer {
                        bindings = <
&none     &none     &none              &none         P_COMENT       &none                                      &none  &none  &none  &none     &none     &none
&none     &none     &sm LALT LA(LS(D)) &sm LCTRL P_  &sm LSHIFT P_  P_COMENT                                   &none  &none  &none  &none     &none     &none
&none     &none     P_EXT_S            P_STRPOP      P_SELECT       &none     &none                  &none     &none  &none  &none  &none     P_DIFPRV  &none
&none     &none     &none                            LT_4           &trans    &none  &none    &none  P_ACTION  &none  RT_4          P_CMPPRV  P_DIFNXT  P_CMPNXT
                        >;
                };

                media_layer {
                        bindings = <
&kp K_NEXT  YT_FASTER  &kp PRINTSCREEN     U_DARK  &bt BT_SEL 0  &out OUT_USB                                              &none  &none  &none  &none       &none      &none
&kp K_PREV  YT_SLOWER  &kp LC(LS(PSCRN))   U_ZOOM  &bt BT_SEL 1  &out OUT_BLE                                              &none  &none  &none  &none       &none      &none
&kp F       &kp M      &kp PRINTSCREEN     &none   &bt BT_SEL 2  &bt BT_CLR     &bootloader                  &bootloader   &none  &none  &none  &none       YT_FASTER  &none
LAR_1       LAR_2      &trans                      LT_4          &none          &reset       &none    &none  &reset        &none  RT_4          &kp K_PREV  YT_SLOWER  &kp K_NEXT
                        >;

                        sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp P_ P_>;
                };

                symbols_layer {
                        bindings = <
LOP_1         &kp DE_CARET  &kp DE_PIPE   &kp DE_AMPS   &kp DE_STAR   &kp DE_PRCNT                                                                  &kp DE_BSLH   &kp DE_LT     &kp DE_GT     &kp DE_FSLH   &kp DE_AT     &kp BSPC
LOP_2         &kp DE_SEMI   &kp DE_COLON  &kp DE_MINUS  &kp DE_DLLR   &kp DE_PLUS                                                                   &kp DE_QMARK  &kp DE_LPAR   &kp DE_RPAR   &kp DE_DQT    &kp DE_FSLH   &none
LOP_3         &kp DE_HASH   &kp DE_LBRC   &kp DE_RBRC   &kp DE_EQUAL  &kp DE_TILDE  &none                                             &none         &kp DE_EXCL   &kp DE_LBKT   &kp DE_RBKT   &kp DE_SQT    &kp DE_UNDER  &none
LAR_1         LAR_2         LAR_3                       LT_4          &kp BSPC      LT_2          LT_1                  &none         &trans        &none         RT_4                        &none         &none         &none
                        >;

                        sensor-bindings = <&inc_dec_kp U_BRI_DN U_BRI_UP &inc_dec_kp P_ P_>;
                };
        };
};