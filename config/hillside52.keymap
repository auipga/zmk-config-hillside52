/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "outer-keys.h"
#include "combos.h"
#include "keymap-german-rev3.h"

#define DVORAK_L 0
#define NAV_L    1
#define SYM_L    2
#define ADJ_L    3

#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)
#define Redo   LC(Y)


/ {
        combos {
                compatible = "zmk,combos";

                // key numbers
                //       0   1   2   3   4   5                      6   7   8   9  10  11
                //      12 [13][14][15][16] 17                     18 [19][20][21][22] 23
                //      24  25 [26] 27  28  29  30  31     32  33  34  35  36 [37] 38  39
                //                 (40) 41  42 [43] 44     45 [46] 47  48 (49)

                //<editor-fold desc="myrioku style combos">
                // row 0                          []                                                          ()
                COMBO(DE_LBRC ,  2  3, LBRC  ) /* [                      */ COMBO(DE_LPAR ,  7  8, LPAR  ) // (
                COMBO(DE_RBKT ,  3  4, RBKT  ) /* ]                      */ COMBO(DE_RPAR ,  8  9, RPAR  ) // )

                // row 1                          -=+                                                         |"'
                COMBO(DE______, 13 14, _____ ) /* free                   */ COMBO(DE_PIPE , 18 19, PIPE  ) // |
                COMBO(DE_MINUS, 14 15, MINUS ) /* -                      */ COMBO(DE_DQT  , 19 20, DQT   ) // "
                COMBO(DE_EQUAL, 15 16, EQUAL ) /* =                      */ COMBO(DE_SQT  , 20 21, SQT   ) // '
                COMBO(DE_PLUS , 16 17, PLUS  ) /* +                      */ COMBO(DE______, 21 22, _____ ) // free
                COMBO(DE_TODO_, 14 16, TODO_ ) /* Shift+Ins              */ COMBO(DE______, 19 21, _____ ) // free

                // row 2                          {}                                                          <>
                COMBO(DE_LBRC , 26 27, LBRC  ) /* {                      */ COMBO(DE______, 34 35, _____ ) // free
                COMBO(DE_RBRC , 27 28, RBRC  ) /* }                      */ COMBO(DE_LT   , 35 36, LT    ) // <
                COMBO(DE______, 28 29, _____ ) /* free                   */ COMBO(DE_GT   , 36 37, GT    ) // >
                COMBO(DE_TODO_, 26 28, TODO_ ) /* {} <-                  */ COMBO(DE_TODO_, 35 37, TODO_ ) // <> <-

                // row 0/1                        @#$%                                                        ^&*\
                COMBO(DE___bad,  1 13, __bad ) /* bad                    */ COMBO(DE_CARET,  6 18, CARET ) // ^
                COMBO(DE_AT   ,  2 14, AT    ) /* @                      */ COMBO(DE_AMPS ,  7 19, AMPS  ) // &
                COMBO(DE_HASH ,  3 15, HASH  ) /* #                      */ COMBO(DE_STAR ,  8 20, STAR  ) // *
                COMBO(DE_DLLR ,  4 16, DLLR  ) /* $                      */ COMBO(DE_BSLH ,  9 21, BSLH  ) // \
                COMBO(DE_PRCNT,  5 17, PRCNT ) /* %                      */ COMBO(DE___bad, 10 22, __bad ) // bad

                // row 1+2                        ``~                                                         "'
                COMBO(DE_TODO_, 14 26, TODO_ ) /* `` <-                  */ COMBO(DE______, 18 34, _____ ) // free
                COMBO(DE_GRAVE, 15 27, GRAVE ) /* `                      */ COMBO(DE_TODO_, 19 35, TODO_ ) // "" <-
                COMBO(DE_TILDE, 16 28, TILDE ) /* ~                      */ COMBO(DE_TODO_, 20 36, TODO_ ) // '' <-
                COMBO(DE______, 17 29, _____ ) /* free                   */ COMBO(DE______, 21 37, _____ ) // free

                // row 0+1 diagonal               !                                                           ?
                COMBO(DE______, 14  3, _____ ) /* free                   */ COMBO(DE______, 18  7, _____ ) // free
                COMBO(DE_EXCL ,  3 16, EXCL  ) /* !                      */ COMBO(DE_QMARK, 19  8, QMARK ) // ?
                COMBO(DE______,  4 17, _____ ) /* free                   */ COMBO(DE______,  8 21, _____ ) // free

                // row 1+2 diagonal               _                                                           :
                COMBO(DE______, 26 15, _____ ) /* free                   */ COMBO(DE______, 34 19, _____ ) // free
                COMBO(DE_UNDER, 15 28, UNDER ) /* _                      */ COMBO(DE_COLON, 35 20, COLON ) // :
                COMBO(DE______, 16 28, _____ ) /* free                   */ COMBO(DE______, 20 37, _____ ) // free
                //</editor-fold>
        };

        keymap {
                compatible = "zmk,keymap";

                dvorak_layer {
/* DVORAK
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   '   |   ,   |   .   |   P   |   Y   |-----------------------------------|   F   |   G   |   C   |   R   |   L   | BKSPC |
 * | TAB   |   A   |   O   |   E   |   U   |   I   |-----------------------------------|   D   |   H   |   T   |   N   |   S   | ENTER |
 * | SHIFT |   ;   |   Q   |   J   |   K   |   X   |   Z   |-------------------|   /   |   B   |   M   |   W   |   V   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */
                        bindings = <
LOP_1         &kp  DE_SQT   &kp  DE_COMMA &kp  DE_DOT   &kp  P        &kp  DE_Y                                                                      &kp  F        &kp  G        &kp  C        &kp  R        &kp  L        ROP_1
LOP_2         &kp  A        &kp  O        &kp  E        &kp  U        &kp  I                                                                         &kp  D        &kp  H        &kp  T        &kp  N        &kp  S        ROP_2
LOP_3         &kp  DE_SEMI  &kp  Q        &kp  J        &kp  K        &kp  X        LT_2_1                                             RT_2_1        &kp  B        &kp  M        &kp  W        &kp  V        RAR_0         ROP_3
LAR_1         LAR_2         LAR_3                       LT_4          LT_3          LT_2           LT_1                  RT_1          RT_2          RT_3          RT_4                        RAR_1         RAR_2         RAR_3
                        >;
			
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                nav_layer {
/* NAV
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | Copy  |   1   |   2   |   3   |   4   |   5   |-----------------------------------|   6   |   7   |   8   |   9   |   0   | BSPC  |
 * | Cut   |  GUI  |  Alt  | Ctrl  | Shift | Paste |-----------------------------------| PG UP |  Left |  Up   |  Down | Right | PG DN |
 * | Shift |  F1   |  F2   |  F3   |  F4   |  F5   |  UnDo |-------------------| ReDo  |  F6   |  F7   |  F8   |  F9   |  F10  | Shift |
 * | F11   |  F12  |       |-------|       |       |       |       |---| ADJ_L |       |       |       |-------| CTRL  | HOME  |  END  |
 */
                        bindings = <
&kp  Copy     &kp  N1       &kp  N2       &kp  N3       &kp  N4       &kp  N5                                                                        &kp   N6      &kp  N7      &kp   N8      &kp   N9      &kp  N0       &trans
&kp  Cut      &kp  LGUI     &kp  LALT     &kp  LCTRL    &kp  LSHFT    &kp  Paste                                                                     &kp   PG_UP   &kp  LEFT    &kp   UP      &kp   DOWN    &kp  RIGHT    &kp PG_DN
&trans        &kp  F1       &kp  F2       &kp  F3       &kp  F4       &kp  F5       &kp Undo                                           &kp  Redo     &kp   F6      &kp  F7      &kp   F8      &kp   F9      &kp  F10      &trans
&kp  F11      &kp  F12      &trans                      &trans        &trans        &trans        &trans                 &mo ADJ_L     &trans        &trans        &trans                     &kp  RCTRL    &kp  HOME     &kp  END
                        >;
			
                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                sym_layer {
/* SYM
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | INS   |   !   |   @   |   #   |   $   |   %   |-----------------------------------|   ^   |   &   |   *   |   (   |   )   | DELETE|
 * | CAPS  |   \   |   -   |   =   |   [   |   ]   |-----------------------------------| Vol+  | Shift | Ctrl  | Alt   | Gui   | ENTER |
 * | Shift |   |   |   _   |   +   |   {   |   }   | Play  |-------------------| Mute  | Vol-  |  N0   |  N1   |  N2   |       | SHIFT |
 * |       |       |       |-------|       |       |       |  ADJ_L |---|      |       |       |       |-------| CTRL  | MENU  |SkAltGr|
 */
                        bindings = <
&kp  INS      &kp DE_EXCL   &kp DE_AT     &kp DE_HASH   &kp DE_DLLR   &kp DE_PRCNT                                                                   &kp DE_CARET  &kp DE_AMPS   &kp DE_STAR   &kp DE_LPAR   &kp DE_RPAR   &kp DEL
&caps_word    &kp DE_BSLH   &kp DE_MINUS  &kp DE_EQUAL  &kp DE_LBKT   &kp DE_RBKT                                                                    &kp C_VOL_UP  &kp RSHFT     &kp RCTRL     &kp LALT      &kp RGUI      &trans
&trans        &kp DE_PIPE   &kp DE_UNDER  &kp DE_PLUS   &kp DE_LBRC   &kp DE_RBRC   &kp C_PP                                           &kp C_MUTE    &kp C_VOL_DN  &kp N0        &kp N1        &kp N2        &none         &trans
&none         &none         &trans                      &trans        &trans        &trans        &mo  ADJ_L               &trans      &trans        &trans        &trans                      &kp RCTRL     &kp K_APP     &sk RALT
                        >;
			
                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };
		

                adj_layer {
/* ADJUST
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |       | DVORAK| TO-DO | TO-DO |       |       |-----------------------------------|       |Prt Scr|       |       |       |       |
 * |       | BT 0  | BT 1  | BT 2  | BT 3  | BT 4  |-----------------------------------|       |       |       |       |       |       |
 * | BOOTL | RESET |       |OUT_USB|OUT_BLE|       |BT CLR |-------------------|       |       |       |       |       |       | SHIFT |
 * ----------------|       |-------|       |       |       |       |---|       |       |       |       |-------| CTRL  |----------------
 */
                        bindings = <
&none         &to  DVORAK_L &to  DVORAK_L &to  DVORAK_L &none         &none                                                                             &none             &kp PRINTSCREEN    &none            &none           &none            &none
&none         &bt  BT_SEL 0 &bt  BT_SEL 1 &bt  BT_SEL 2 &bt  BT_SEL 3 &bt  BT_SEL 4                                                                     &none             &none              &none            &none           &none            &none
&bootloader   &reset        &none         &out OUT_USB  &out OUT_BLE  &none         &bt BT_CLR                                         &none            &none             &none              &none            &none           &none            &trans
&none         &none         &trans                      &trans        &trans        &trans        &trans                 &trans        &trans           &trans            &trans                              &kp  RCTRL      &none            &none
                        >;
			
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };
        };
};